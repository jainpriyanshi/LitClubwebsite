#!/usr/bin/nodejs
var debug = require('debug')('my-application');
var app = require('../app');

app.set('port', process.env.PORT || 4000);
const Post = require ("../models/Post");
const Blog = require ("../models/Blog");
const http = require('http');
var server = http.createServer(app);

var io = require('socket.io')(http);


io.on('connection', function(socket){
    socket.on('disconnect', function(){
  });
 
  socket.on('post_message', function(data){

    const newPost = new Post({
      author : data.name,
      ldap : data.ldap,
      likes: 0,
      postCaption:data.caption,
      posttext: data.text,
      postBadge: data.badge,
      Date : new Date,
      likers: []
     });
     newPost.save();
     io.sockets.emit("change_data");
  });

  socket.on('initial_data',()=> {
    Post.find({}).sort({Date: -1}).then(docs => {
      io.sockets.emit("get_data",docs);
    })
  });

  socket.on('update_likes' , function(data){
    var liker = {"ldap" : data.user};
    
    Post.findOne({_id: data.id}).then(tmp => {
      var like = tmp.likes;
      Post.findOne({_id: data.id , likers: {$elemMatch: {ldap: liker.ldap}}}).then(post => {
        if(!post)
        {
          Post.findOneAndUpdate({_id: data.id}, {$set: { likes: like+1} , $addToSet: {likers: liker} } ).then(user => {
            if(user){
              like = like+1;
            }
          });
        }
      });
    })
    
    io.sockets.emit("change_data");
  });

  socket.on('post_blog', function(data){

    const newBlog = new Blog({
      author : data.name,
      ldap : data.ldap,
      likes: 0,
      postTitle:data.title,
      postText: data.text,
      postBadge: data.badge,
      postSummary: data.summary,
      Date : new Date,
      likers: []
     });
     newBlog.save();
     io.sockets.emit("change_blog_data");
  });
  socket.on('initial_blog_data',()=> {
    Blog.find({}).sort({Date: -1}).then(docs => {
      io.sockets.emit("get_blog_data",docs);
    })
  });
  socket.on('update_blog_likes' , function(data){
    var liker = {"ldap" : data.user};
    
    Blog.findOne({_id: data.id}).then(tmp => {
      var like = tmp.likes;
      Blog.findOne({_id: data.id , likers: {$elemMatch: {ldap: liker.ldap}}}).then(blog => {
        if(!blog)
        {
          Blog.findOneAndUpdate({_id: data.id}, {$set: { likes: like+1} , $addToSet: {likers: liker} } ).then(user => {
            if(user){
              like = like+1;
              console.log(like);
            }
          });
        }
      });
    })
    io.sockets.emit("change_blog_data");
  });
});

io.attach(server);
server.listen(4000);
